// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// Enums
enum PropertyType {
  APARTMENT
  HOUSE
  COMMERCIAL
  LAND
  OTHER
}

enum PropertySubType {
  PENTHOUSE
  APARTMENT
  MAISONETTE
  TERRACED_HOUSE
  DETACHED_HOUSE
  SEMI_DETACHED_HOUSE
  VILLA
  OFFICE
  RETAIL
  WAREHOUSE
  GARAGE
  PARKING_SPACE
  BUILDING_LAND
  AGRICULTURAL_LAND
  FOREST_LAND
  OTHER
}

enum RentType {
  RENT
  BUY
}

enum PropertyCondition {
  NEW
  EXCELLENT
  GOOD
  NEEDS_RENOVATION
  OLD
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  SOLD
  RENTED
  RESERVED
}

enum MediaType {
  PHOTO
  VIDEO
  VIRTUAL_TOUR
  FLOOR_PLAN
  DOCUMENT
}

enum UserSubtype {
  PRIVATE
  COMPANY
  AGENT
}

enum HeatingSource {
  GAS
  OIL
  ELECTRIC
  HEAT_PUMP
  SOLAR
  WOOD
  DISTRICT_HEATING
  OTHER
}

enum HeatingDistribution {
  RADIATORS
  UNDERFLOOR_HEATING
  AIR_CONDITIONING
  OTHER
}

// Core Models
model Company {
  id            String   @id @default(cuid())
  externalId    String?  @unique
  name          String
  country       String   @default("at")
  email         String?
  contactEmail  String?
  phone         String?
  description   String?
  vat           String?
  website       String?
  imageUrl      String?
  logoColor     String?
  address       String?
  countProperties Int    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  users         User[]
  properties    Property[]
  billingAddress BillingAddress?

  @@index([country])
  @@index([name])
  @@map("companies")
}

model BillingAddress {
  id        String  @id @default(cuid())
  address   String
  zip       String
  city      String
  state     String?
  country   String?
  name      String?
  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("billing_addresses")
}

model User {
  id            String      @id @default(cuid())
  externalId    String?     @unique
  firstName     String
  lastName      String
  email         String?
  contactEmail  String?
  phone         String?
  phone2        String?
  country       String?
  address       String?
  imageUrl      String?
  subtype       UserSubtype @default(PRIVATE)
  propertyCount Int?
  languages     String[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  companyId     String?
  company       Company?    @relation(fields: [companyId], references: [id])
  properties    Property[]

  @@index([email])
  @@index([contactEmail])
  @@index([companyId])
  @@index([subtype])
  @@map("users")
}

model Property {
  id                    String            @id @default(cuid())
  externalId2           String?           @unique
  title                 String
  abstract              String?
  address               String
  addressDoor           String?
  addressStair          String?
  zip                   String
  city                  String
  country               String            @default("at")
  
  // Property details
  rooms                 Int?
  roomsBed              Int?
  roomsBath             Int?
  roomsToilet           Int?
  roomsGuestToilet      Int?
  roomHeight            Float?
  size                  Float?
  sizeProperty          Float?
  sizeNet               Float?
  
  // Pricing
  rent                  Int?              // Price in cents
  rentPerFrom           Int?
  rentPerTo             Int?
  rentUtilities         Int?
  rentCalculated        Float[]           // [min, max] calculated rent per m²
  rentFull              Int?
  rentDeposit           Int?
  rentDepositText       String?
  rentComission         Int?
  rentComissionText     String?
  
  // Location
  location              Float[]           // [longitude, latitude]
  locationIsExact       Boolean           @default(false)
  locationAccuracy      Int?
  locationRadius        Float?
  
  // Property classification
  type                  PropertyType
  subType               PropertySubType
  condition             PropertyCondition
  rentType              RentType
  status                PropertyStatus    @default(ACTIVE)
  
  // Additional details
  accessibility         String?
  unitType              String?
  pets                  String?
  floorType             String?
  heatingSource         HeatingSource?
  heatingDistribution   HeatingDistribution?
  leaseDuration         String?
  availableFrom         DateTime?
  availableFromText     String?
  highlight             String?
  active                Boolean           @default(true)
  listed                Boolean           @default(true)
  verified              Boolean           @default(false)
  constructionYear      Int?
  modernisationYear     Int?
  floor                 Int?
  readiness             String?
  tier                  String?
  furnish               String?
  countBuildings        Int?
  countUnits            Int?
  rentDurationMin       Int?
  rentDurationMax       Int?
  priceOnRequest        Boolean?
  style                 String?
  allowAppointments     Boolean           @default(true)
  reservedUntil         DateTime?
  requestLimit          Int?
  orientation           String?
  quietness             String?
  source                String?
  
  // Timestamps
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  lastUpdated           DateTime          @default(now())
  
  // URL segments for SEO
  urlSegments           String[]
  
  // Additional computed/display fields
  tenementCount         Int?              @default(0)
  isFavorite            Boolean           @default(false)
  hasAlert              Boolean           @default(false)
  sizeRange             Float[]           // [min, max] size range
  rentRange             Int[]             // [min, max] rent range in cents
  rentPerRange          Float[]           // [min, max] rent per m² range
  roomsRange            Int[]             // [min, max] rooms range
  roomsBathRange        Int[]             // [min, max] bathrooms range
  roomsBedRange         Int[]             // [min, max] bedrooms range
  rentPer               Float[]           // [min, max] rent per m²
  tags                  String[]          // Property tags like "verified", "byAgent", etc.
  requests              Int?              // Number of requests
  rentDisplay           Float[]           // [min, max, isPerM2] for display
  rentPerDisplay        Float[]           // [min, max, isPerM2] for display
  earliestAppointment   DateTime?         // Earliest available appointment
  
  // Relations
  ownerId               String?
  owner                 Company?          @relation(fields: [ownerId], references: [id])
  userId                String?
  user                  User?             @relation(fields: [userId], references: [id])
  parentId              String?
  parent                Property?         @relation("PropertyHierarchy", fields: [parentId], references: [id])
  children              Property[]        @relation("PropertyHierarchy")
  
  // Related models
  media                 Media[]
  amenities             PropertyAmenity[]
  spaces                PropertySpace?
  energy                EnergyData?
  floors                Floor[]
  tenements             Tenement[]

  // Indexes for performance
  @@index([type])
  @@index([subType])
  @@index([rentType])
  @@index([status])
  @@index([city])
  @@index([zip])
  @@index([country])
  @@index([rent])
  @@index([size])
  @@index([rooms])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([active])
  @@index([listed])
  @@index([verified])
  @@index([ownerId])
  @@index([userId])
  @@index([parentId])
  @@index([availableFrom])
  @@index([constructionYear])
  @@index([condition])
  @@index([heatingSource])
  @@index([heatingDistribution])
  @@index([priceOnRequest])
  @@index([allowAppointments])
  @@index([reservedUntil])
  @@index([location])
  @@index([locationIsExact])
  @@index([locationAccuracy])
  @@index([tenementCount])
  @@index([isFavorite])
  @@index([hasAlert])
  @@index([tags])
  @@index([requests])
  @@index([earliestAppointment])
  @@map("properties")
}

model Media {
  id            String     @id @default(cuid())
  type          MediaType
  cdnUrl        String
  bluredDataURL String?
  propertyId    String
  property      Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())

  @@index([propertyId])
  @@index([type])
  @@index([createdAt])
  @@map("media")
}

model Amenity {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  category    String?
  createdAt   DateTime @default(now())

  // Relations
  properties  PropertyAmenity[]

  @@index([name])
  @@index([category])
  @@map("amenities")
}

model PropertyAmenity {
  id         String  @id @default(cuid())
  propertyId String
  amenityId  String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  amenity    Amenity  @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@unique([propertyId, amenityId])
  @@index([propertyId])
  @@index([amenityId])
  @@map("property_amenities")
}

model PropertySpace {
  id         String @id @default(cuid())
  propertyId String @unique
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Cellars
  cellarsCount Int?
  cellarsArea  Float?
  cellarsType  String?

  // Garages
  garagesCount Int?
  garagesArea  Float?

  // Parkings
  parkingsCount Int?
  parkingsArea  Float?

  // Underground Parkings
  undergroundParkingsCount Int?
  undergroundParkingsArea  Float?

  // Parkades
  parkadesCount Int?
  parkadesArea  Float?

  // Carports
  carportsCount Int?
  carportsArea  Float?

  // Duplex Parkings
  duplexParkingsCount Int?
  duplexParkingsArea  Float?

  // Storages
  storagesCount Int?
  storagesArea  Float?

  // Balconies
  balconiesCount Int?
  balconiesArea  Float?

  // Loggias
  loggiasCount Int?
  loggiasArea  Float?

  // Terraces
  terracesCount Int?
  terracesArea  Float?

  // Gardens
  gardensCount Int?
  gardensArea  Float?

  @@index([propertyId])
  @@map("property_spaces")
}

model EnergyData {
  id         String @id @default(cuid())
  propertyId String @unique
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  hwb        Float?
  hwbClass   Int?
  fgee       Float?
  fgeeClass  Int?
  validThru  DateTime?

  @@index([propertyId])
  @@index([hwbClass])
  @@index([fgeeClass])
  @@map("energy_data")
}

model Floor {
  id         String @id @default(cuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  floorNumber Int
  area        Float?
  rooms       Int?
  description String?

  @@index([propertyId])
  @@index([floorNumber])
  @@map("floors")
}

// Search and Filter Models
model SearchFilter {
  id         String @id @default(cuid())
  userId     String?
  name       String
  filters    Json   // Store the filter object as JSON
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([name])
  @@index([createdAt])
  @@map("search_filters")
}

model SearchAgent {
  id         String @id @default(cuid())
  userId     String
  name       String
  filters    Json   // Store the filter object as JSON
  email      String
  active     Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([email])
  @@index([active])
  @@index([createdAt])
  @@map("search_agents")
}

// Tenement model for property hierarchy
model Tenement {
  id         String @id @default(cuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  // Tenement-specific fields (can be extended based on actual data)
  data       Json?   // Store any tenement-specific data as JSON
  
  @@index([propertyId])
  @@map("tenements")
}

